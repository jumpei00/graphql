package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"net/http"
	"time"

	"github.com/jumpei00/graphql/backend/internal/domain"
	"github.com/jumpei00/graphql/backend/internal/graph"
	"github.com/jumpei00/graphql/backend/internal/graph/middleware"
	"github.com/jumpei00/graphql/backend/internal/graph/model"
	"github.com/jumpei00/graphql/backend/internal/graph/schema"
)

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (*model.User, error) {
	user, err := r.userRepository.GetByID(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:          user.ID,
		Username:    user.Username,
		Mailaddress: user.Mailaddress,
		CreatedAt:   user.CreatedAt,
		UpdatedAt:   user.UpdatedAt,
	}, nil
}

// Post is the resolver for the post field.
func (r *commentResolver) Post(ctx context.Context, obj *model.Comment) (*model.Post, error) {
	post, err := r.postRepository.GetByID(ctx, obj.PostID)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
		UpdatedAt: post.UpdatedAt,
		UserID:    post.UserID,
	}, nil
}

// User is the resolver for the user field.
func (r *likeResolver) User(ctx context.Context, obj *model.Like) (*model.User, error) {
	user, err := r.userRepository.GetByID(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:          user.ID,
		Username:    user.Username,
		Mailaddress: user.Mailaddress,
		CreatedAt:   user.CreatedAt,
		UpdatedAt:   user.UpdatedAt,
	}, nil
}

// Post is the resolver for the post field.
func (r *likeResolver) Post(ctx context.Context, obj *model.Like) (*model.Post, error) {
	post, err := r.postRepository.GetByID(ctx, obj.PostID)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
		UpdatedAt: post.UpdatedAt,
		UserID:    post.UserID,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userInput schema.UserInput) (*model.User, error) {
	user := domain.User{
		Username:    userInput.Username,
		Mailaddress: userInput.Mailaddress,
		Password:    userInput.Password,
	}

	newUser, err := r.userRepository.Create(ctx, &user)
	if err != nil {
		return nil, err
	}

	session := domain.Session{
		UserID:    newUser.ID,
		CreatedAt: time.Now(),
	}

	token, err := r.sessionRepository.Create(ctx, &session)
	if err != nil {
		return nil, err
	}

	if rw, ok := ctx.Value(middleware.ResponseWriterKey).(http.ResponseWriter); ok {
		http.SetCookie(rw, &http.Cookie{
			Name:     "graphql_sns_token",
			Value:    token,
			Path:     "/",
			HttpOnly: true,
			Secure:   false,
			SameSite: http.SameSiteLaxMode,
			MaxAge:   3600 * 24 * 7,
		})
	}

	return &model.User{
		ID:          newUser.ID,
		Username:    newUser.Username,
		Mailaddress: newUser.Mailaddress,
		CreatedAt:   newUser.CreatedAt,
		UpdatedAt:   newUser.UpdatedAt,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userInput schema.UserInput) (*model.User, error) {
	session, err := r.sessionRepository.GetByToken(ctx, ctx.Value(middleware.SessionKey).(string))
	if err != nil {
		return nil, err
	}

	user, err := r.userRepository.GetByID(ctx, session.UserID)
	if err != nil {
		return nil, err
	}

	user.Username = userInput.Username
	user.Mailaddress = userInput.Mailaddress
	user.Password = userInput.Password

	updatedUser, err := r.userRepository.Update(ctx, user)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:          updatedUser.ID,
		Username:    updatedUser.Username,
		Mailaddress: updatedUser.Mailaddress,
		CreatedAt:   updatedUser.CreatedAt,
		UpdatedAt:   updatedUser.UpdatedAt,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	session, err := r.sessionRepository.GetByToken(ctx, ctx.Value(middleware.SessionKey).(string))
	if err != nil {
		return false, err
	}

	err = r.userRepository.Delete(ctx, session.UserID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, content string) (*model.Post, error) {
	session, err := r.sessionRepository.GetByToken(ctx, ctx.Value(middleware.SessionKey).(string))
	if err != nil {
		return nil, err
	}

	post := domain.Post{
		UserID:  session.UserID,
		Content: content,
	}

	newPost, err := r.postRepository.Create(ctx, &post)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        newPost.ID,
		Content:   newPost.Content,
		CreatedAt: newPost.CreatedAt,
		UpdatedAt: newPost.UpdatedAt,
		UserID:    newPost.UserID,
	}, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id int, content string) (*model.Post, error) {
	post, err := r.postRepository.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	post.Content = content

	updatedPost, err := r.postRepository.Update(ctx, post)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        updatedPost.ID,
		Content:   updatedPost.Content,
		CreatedAt: updatedPost.CreatedAt,
		UpdatedAt: updatedPost.UpdatedAt,
		UserID:    updatedPost.UserID,
	}, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (bool, error) {
	err := r.postRepository.Delete(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID int, content string) (*model.Comment, error) {
	session, err := r.sessionRepository.GetByToken(ctx, ctx.Value(middleware.SessionKey).(string))
	if err != nil {
		return nil, err
	}

	comment := domain.Comment{
		UserID:  session.UserID,
		PostID:  postID,
		Content: content,
	}

	newComment, err := r.commentRepository.Create(ctx, &comment)
	if err != nil {
		return nil, err
	}

	return &model.Comment{
		ID:        newComment.ID,
		Content:   newComment.Content,
		CreatedAt: newComment.CreatedAt,
		UpdatedAt: newComment.UpdatedAt,
		UserID:    newComment.UserID,
		PostID:    newComment.PostID,
	}, nil
}

// CreateLike is the resolver for the createLike field.
func (r *mutationResolver) CreateLike(ctx context.Context, postID int) (*model.Like, error) {
	session, err := r.sessionRepository.GetByToken(ctx, ctx.Value(middleware.SessionKey).(string))
	if err != nil {
		return nil, err
	}

	like := domain.Like{
		UserID: session.UserID,
		PostID: postID,
	}

	newLike, err := r.likeRepository.Create(ctx, &like)
	if err != nil {
		return nil, err
	}

	return &model.Like{
		ID:        newLike.ID,
		CreatedAt: newLike.CreatedAt,
		PostID:    newLike.PostID,
		UserID:    newLike.UserID,
	}, nil
}

// DeleteLike is the resolver for the deleteLike field.
func (r *mutationResolver) DeleteLike(ctx context.Context, id int) (bool, error) {
	if err := r.likeRepository.Delete(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	user, err := r.userRepository.GetByID(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:          user.ID,
		Username:    user.Username,
		Mailaddress: user.Mailaddress,
		CreatedAt:   user.CreatedAt,
		UpdatedAt:   user.UpdatedAt,
	}, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post) ([]*model.Comment, error) {
	comments, err := r.commentRepository.GetAllByPostID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var commentsModel []*model.Comment
	for _, comment := range comments {
		commentsModel = append(commentsModel, &model.Comment{
			ID:        comment.ID,
			Content:   comment.Content,
			CreatedAt: comment.CreatedAt,
			UpdatedAt: comment.UpdatedAt,
			UserID:    comment.UserID,
			PostID:    comment.PostID,
		})
	}

	return commentsModel, nil
}

// Likes is the resolver for the likes field.
func (r *postResolver) Likes(ctx context.Context, obj *model.Post) ([]*model.Like, error) {
	likes, err := r.likeRepository.GetAllByPostID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var likesModel []*model.Like
	for _, like := range likes {
		likesModel = append(likesModel, &model.Like{
			ID:        like.ID,
			CreatedAt: like.CreatedAt,
			PostID:    like.PostID,
			UserID:    like.UserID,
		})
	}

	return likesModel, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	session, err := r.sessionRepository.GetByToken(ctx, ctx.Value(middleware.SessionKey).(string))
	if err != nil {
		return nil, err
	}

	user, err := r.userRepository.GetByID(ctx, session.UserID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:          user.ID,
		Username:    user.Username,
		Mailaddress: user.Mailaddress,
		CreatedAt:   user.CreatedAt,
		UpdatedAt:   user.UpdatedAt,
	}, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := r.postRepository.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	var postsModel []*model.Post
	for _, post := range posts {
		postsModel = append(postsModel, &model.Post{
			ID:        post.ID,
			Content:   post.Content,
			CreatedAt: post.CreatedAt,
			UpdatedAt: post.UpdatedAt,
			UserID:    post.UserID,
		})
	}

	return postsModel, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*model.Post, error) {
	post, err := r.postRepository.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
		UpdatedAt: post.UpdatedAt,
		UserID:    post.UserID,
	}, nil
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User) ([]*model.Post, error) {
	posts, err := r.postRepository.GetAllByUserID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var postsModel []*model.Post
	for _, post := range posts {
		postsModel = append(postsModel, &model.Post{
			ID:        post.ID,
			Content:   post.Content,
			CreatedAt: post.CreatedAt,
			UpdatedAt: post.UpdatedAt,
			UserID:    post.UserID,
		})
	}

	return postsModel, nil
}

// Comments is the resolver for the comments field.
func (r *userResolver) Comments(ctx context.Context, obj *model.User) ([]*model.Comment, error) {
	comments, err := r.commentRepository.GetAllByUserID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var commentsModel []*model.Comment
	for _, comment := range comments {
		commentsModel = append(commentsModel, &model.Comment{
			ID:        comment.ID,
			Content:   comment.Content,
			CreatedAt: comment.CreatedAt,
			UpdatedAt: comment.UpdatedAt,
			UserID:    comment.UserID,
			PostID:    comment.PostID,
		})
	}

	return commentsModel, nil
}

// Likes is the resolver for the likes field.
func (r *userResolver) Likes(ctx context.Context, obj *model.User) ([]*model.Like, error) {
	likes, err := r.likeRepository.GetAllByUserID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var likesModel []*model.Like
	for _, like := range likes {
		likesModel = append(likesModel, &model.Like{
			ID:        like.ID,
			CreatedAt: like.CreatedAt,
			PostID:    like.PostID,
			UserID:    like.UserID,
		})
	}

	return likesModel, nil
}

// Comment returns graph.CommentResolver implementation.
func (r *Resolver) Comment() graph.CommentResolver { return &commentResolver{r} }

// Like returns graph.LikeResolver implementation.
func (r *Resolver) Like() graph.LikeResolver { return &likeResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type commentResolver struct{ *Resolver }
type likeResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
